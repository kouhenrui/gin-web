# 请求定义
[request_definition]
r = sub, obj, act
# sub ——> 想要访问资源的用户角色(Subject)——请求实体
# obj ——> 访问的资源(Object)
# act ——> 访问的方法(Action: get、post...)

# 策略定义
[policy_definition]
p = sub, obj, act

# 组定义
[role_definition]
g = _, _
# g2 =_, _, _
# g = _,_定义了用户——角色，角色——角色的映射关系，前者是后者的成员，拥有后者的权限。
# _,_表示用户，角色/用户组
#g2代表用户和资源都有角色
#g=_,_,_表示前者在后者中拥有中间定义的角色，在匹配器中使用g要带上dom

# 策略效果
[policy_effect]
e = some(where (p.eft == allow))
# 上面表示有任意一条 policy rule 满足, 则最终结果为 allow；p.eft它可以是allow或deny，它是可选的，默认是allow

# 匹配器
[matchers]
#m = g(r.sub, p.sub)  &&r.obj == p.obj && r.act == p.act || r.sub == "superadmin"
m = (g(r.sub, p.sub) || p.sub == "*") && keyMatch(r.obj, p.obj) && (r.act == p.act || p.act == "*") ||r.sub == "superAdmin"
#正则匹配
#&&
# keyMatch(r.obj, p.obj) && regexMatch(r.act, p.act)
#&& g2(r.obj, p.obj)
 #r.sub == p.sub && && my_func(r.obj, p.obj)

# 上面模型文件规定了权限由sub,obj,act，dom要素组成，只有在策略列表中有和它完全相同的策略时，该请求才能通过。
